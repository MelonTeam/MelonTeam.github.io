<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MelonTeam</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 15 Jun 2017 18:45:43 +0800</pubDate>
    <lastBuildDate>Thu, 15 Jun 2017 18:45:43 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>make wechat great again</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#工欲善其事必先利其器&quot; id=&quot;markdown-toc-工欲善其事必先利其器&quot;&gt;&lt;a name=&quot;工欲善其事必先利其器&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;工欲善其事必先利其器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;strong&gt;手机无需越狱&lt;/strong&gt;，项目 github 地址: &lt;a href=&quot;https://github.com/yulingtianxia/fishchat&quot;&gt;fishchat&lt;/a&gt;，make wechat great again！

&lt;h2 id=&quot;工欲善其事必先利其器&quot;&gt;&lt;a name=&quot;工欲善其事必先利其器&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;工欲善其事必先利其器&lt;/h2&gt;

因为没有越狱手机，所以不是直接写 tweak 放手机里，而是需要将 &lt;code class=&quot;highlighter-rouge&quot;&gt;captainhook&lt;/code&gt; 工程编译出的 dylib 注入到已砸壳 app 的二进制文件中。同样因为没有越狱机，所以砸壳的文件只能从 某 p 助手下载了。

我写了一个 shell 脚本 &lt;a href=&quot;https://github.com/yulingtianxia/fishchat/blob/master/shell/autoswimfi.sh&quot;&gt;autoswimfi.sh&lt;/a&gt; 帮我完成一些重复性的任务：
&lt;ol&gt;
  &lt;li&gt;查找可用的 iphone 开发者证书1. 解压 ipa 文件1. 拷贝 mobileprovision 文件和要注入的 dylib 文件到 app 文件夹中1. 向 app 中可执行文件的 &lt;code class=&quot;highlighter-rouge&quot;&gt;load commands&lt;/code&gt; 段中加入一条加载 dylib 的指令1. 对 app 中所有的 app，appx，framework，dylib 文件用第 1 步获取的证书进行重签名1. 打包签名好的 ipa 文件1. 删除上述过程中产生的中间文件1. 通过 usb 线安装 ipa 文件手机上
&lt;a href=&quot;https://github.com/yulingtianxia/fishchat/blob/master/shell/autoswimfi.sh&quot;&gt;autoswimfi.sh&lt;/a&gt; 需要传入的三个参数分别为：已砸壳的 ipa 文件，没过期的 mobileprovision 文件，要注入的 dylib 文件。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 25 May 2017 20:23:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/25/make_wechat_great_again/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/25/make_wechat_great_again/</guid>
        
        <category>微信 ios</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>runloop解读</title>
        <description>
    runloop 是ios/osx 应用程序运行的基础，它使我们的程序能够不断处在一个循环中，有效地接受事件并处理事件，可以说，它为整个程序的运行搭建了一个框架。不过，在平时上层的开发中，nsrunloop/cfrunloopref 暴露的接口使用的并不多，使得我们忽略了对它原理和机制的探究，而这篇文章的目的就是对runloop机制进行一次解读，加深了解。

</description>
        <pubDate>Sun, 21 May 2017 23:40:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/21/runloop_jie_du/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/21/runloop_jie_du/</guid>
        
        <category>ios runloop</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>android bitmap的缓存策略</title>
        <description>
      不论是android还是ios设备，流量对于用户而言都是宝贵的。在没有wifi的场景下，如果加载批量的图片消耗用户过多流量，被其知晓，又要被念叨一波~ &lt;img src=&quot;/image/android_bitmap_de_huan_cun_ce_lve/0e7533339eb300c1948b6eab511c562d45eedfa01d50ddd17e5ffad5c2b79709&quot; border=&quot;0&quot; /&gt; 如何避免消耗过多的流量呢？当程序第一次从网络加载图片后，就将其缓存到移动设备上，这样再次使用这个图片时，就不用再次从网络上下载为用户节省了流量。

</description>
        <pubDate>Fri, 28 Apr 2017 20:39:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/28/android_bitmap_de_huan_cun_ce_lve/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/28/android_bitmap_de_huan_cun_ce_lve/</guid>
        
        <category>android bitmap</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>抠图技术初探</title>
        <description>
图像抠图英文名叫 image matting，顾名思义就是将目标图像从背景中分离出来的一种图像处理技术。根据图像背景的复杂程度，一般分为纯色背景抠图（“绿幕”或者“蓝幕”）和自然图像抠图。

&lt;strong&gt;“绿幕”抠图&lt;/strong&gt;&lt;br /&gt; 这项技术主要被用在电影工业中。比如有时看到电影拍摄的场景中周围全是绿色的背景，甚至里面的工作人员也穿着绿色的衣服。这些绿色的背景在后期的处理中会用抠图技术去除，替换上电影中的背景，制作出各种宏大的场景或者特效，比如：

</description>
        <pubDate>Wed, 26 Apr 2017 21:36:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/26/kou_tu_ji_shu_chu_tan/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/26/kou_tu_ji_shu_chu_tan/</guid>
        
        <category>抠图 android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>ndk代码支持断点调试</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#背景&quot; id=&quot;markdown-toc-背景&quot;&gt;&lt;font&gt;背景&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;背景&quot;&gt;&lt;font&gt;背景&lt;/font&gt;&lt;/h1&gt;

android的ndk代码编写一直被认为是很痛苦的一件事情，除了android程序员对c++的陌生外，还有一个主要原因是无法断点调试。无法断点调试很难发现和排查问题，大大影响开发效率。实际上android studio从2.2开始就完全支持ndk开发，并且可以进行断点调试。

实际应用中发现，真正使用新版studio构建c/c++工程的项目极少。&lt;strong&gt;这里有个误区是android studio其实是支持ndk-build和cmake两种构建方式的&lt;/strong&gt;，但是几乎所有的博客在给教程的时候都是用的官方推荐的cmake构建方式。老项目使用ndk-build构建，工程大的mk文件也很复杂，迁移和学习成本都很大。ndk-build和cmake只是编译方式的不同，两者均可以利用lldb进行断点调试，对于其它功能支持也是一样的。

从大的方向上来看，使用cmake构建很美好，cmake作为通用跨平台编译方案，以后肯定有更好的前景。但是对于android本身来说，大家相对都更熟悉ndk-build方案，而如果都能支持相同的功能，显然直接把ndk-build方案迁移过去成本最小。

</description>
        <pubDate>Tue, 25 Apr 2017 18:40:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/25/ndk_dai_ma_zhi_chi_duan_dian_diao_shi/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/25/ndk_dai_ma_zhi_chi_duan_dian_diao_shi/</guid>
        
        <category>android ndk</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>老司机用神经网络带您安全驾驶</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#0-概述&quot; id=&quot;markdown-toc-0-概述&quot;&gt;0 概述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;0-概述&quot;&gt;0 概述&lt;/h1&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

随着今年深度学习的热潮的来临，神经网络已经被应用在越来越多的应用中。而在印象中对于神经网络进行训练的往往需要借助大量的计算资源与数据。其实通过一定的方法，配合预训练好的网络，我们完全可以在自己的pc上训练出一个准确率较高、实用性也非常不错的网络。下面我就以kaggle上的一个竞赛为例，带领各位司机训练一个对&lt;strong&gt;驾驶行为&lt;/strong&gt;进行分类的网络。

</description>
        <pubDate>Tue, 25 Apr 2017 00:06:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/25/lao_si_ji_yong_shen_jing_wang_luo_dai_nin_an_quan_jia_shi/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/25/lao_si_ji_yong_shen_jing_wang_luo_dai_nin_an_quan_jia_shi/</guid>
        
        <category>深度学习 神经网络</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>机器学习入门系列06，logistic regression逻辑回归</title>
        <description>
&lt;blockquote&gt;

&lt;/blockquote&gt;

引用课程：&lt;a href=&quot;http://speech.ee.ntu.edu.tw/~tlkagk/courses_ml16.html&quot;&gt;http://speech.ee.ntu.edu.tw/~tlkagk/courses_ml16.html&lt;/a&gt;

先看这里，可能由于你正在查看这个平台行间公式不支持很多的渲染，所以最好在我的csdn上查看，传送门：（无奈脸）

&lt;blockquote&gt;

&lt;/blockquote&gt;

csdn博客文章地址：&lt;a href=&quot;http://blog.csdn.net/zyq522376829/article/details/69941886&quot;&gt;http://blog.csdn.net/zyq522376829/article/details/69941886&lt;/a&gt;

</description>
        <pubDate>Mon, 10 Apr 2017 17:25:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/10/ji_qi_xue_xi_ru_men_xi_lie_06_logistic_regression_luo_ji_hui_gui/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/10/ji_qi_xue_xi_ru_men_xi_lie_06_logistic_regression_luo_ji_hui_gui/</guid>
        
        <category>判别方法 交叉熵</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>深度学习入门实战（三）-逻辑回归</title>
        <description>
在本文的开始前，强烈推荐两个深度学习相关的视频集&lt;br /&gt;1.台湾李宏毅教授的ml 2016，清晰明了，很多晦涩的原理能让你看了也能明白：&lt;a href=&quot;https://www.youtube.com/watch?v=fegaeph9uaa&amp;amp;list=pljv_el3uvtspy9ocry30obpnlco89yu49&quot;&gt;https://www.youtube.com/watch?v=fegaeph9uaa&amp;amp;list=pljv_el3uvtspy9ocry30obpnlco89yu49&lt;/a&gt;&lt;br /&gt;2.周莫烦的tensorflow教程，同样清晰明了：&lt;a href=&quot;https://www.youtube.com/watch?v=rsrkp8vaavq&amp;amp;index=1&amp;amp;list=plxo45tsb95cki5ailf5txxfpzb-0zevz8&quot;&gt;https://www.youtube.com/watch?v=rsrkp8vaavq&amp;amp;index=1&amp;amp;list=plxo45tsb95cki5ailf5txxfpzb-0zevz8&lt;/a&gt;

</description>
        <pubDate>Thu, 06 Apr 2017 17:56:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/06/shen_du_xue_xi_ru_men_shi_zhan___san__-_luo_ji_hui_gui/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/06/shen_du_xue_xi_ru_men_shi_zhan___san__-_luo_ji_hui_gui/</guid>
        
        <category>深度学习 逻辑回归</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>机器学习入门系列05，classification: probabilistic generative model（分类：概率生成模型）</title>
        <description>
&lt;blockquote&gt;

&lt;/blockquote&gt;

引用课程：&lt;a href=&quot;http://speech.ee.ntu.edu.tw/~tlkagk/courses_ml16.html&quot;&gt;http://speech.ee.ntu.edu.tw/~tlkagk/courses_ml16.html&lt;/a&gt;

先看这里，可能由于你正在查看这个平台行间公式不支持很多的渲染，所以最好在我的csdn上查看，传送门：（无奈脸）

&lt;blockquote&gt;

&lt;/blockquote&gt;

csdn博客文章地址：&lt;a href=&quot;http://blog.csdn.net/zyq522376829/article/details/69216876&quot;&gt;http://blog.csdn.net/zyq522376829/article/details/69216876&lt;/a&gt;

</description>
        <pubDate>Wed, 05 Apr 2017 06:24:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/05/ji_qi_xue_xi_ru_men_xi_lie_05_classification__probabilistic_generative_model__fen_lei___gai_lv_sheng_cheng_mo_xing__/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/05/ji_qi_xue_xi_ru_men_xi_lie_05_classification__probabilistic_generative_model__fen_lei___gai_lv_sheng_cheng_mo_xing__/</guid>
        
        <category>后验概率 最大似然...</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>深度学习入门实战（二）</title>
        <description>&lt;blockquote&gt;
  导语：上一篇文章我们介绍了MxNet的安装，但MxNet有个缺点，那就是文档不太全，用起来可能是要看源代码才能理解某个方法的含义，所以今天我们就介绍一下TensorFlow，这个由谷歌爸爸出品的深度学习框架，文档比较全～以后的我们也都使用这个框架～
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 19:04:58 +0800</pubDate>
        <link>http://localhost:4000/2017/03/28/Deep_learning_entry_2/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/28/Deep_learning_entry_2/</guid>
        
        
        <category>机器学习</category>
        
      </item>
    
  </channel>
</rss>
