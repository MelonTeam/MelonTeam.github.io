<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MelonTeam</title>
    <description>腾讯移动终端团队, 拥有丰富的移动终端的开发经验, 专注于前沿技术的探索和研究</description>
    <link>http://MelonTeam.com/</link>
    <atom:link href="http://MelonTeam.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Aug 2017 14:50:29 +0800</pubDate>
    <lastBuildDate>Tue, 01 Aug 2017 14:50:29 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>多端排版杂谈</title>
        <description>
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;导语 本次主要聊聊多平台的排版技术的差异与共同，涉及的平台有Web、Android、iOS&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

要说排版技术，在这三个平台中我觉得最有话语权的应该就Web端了；主要因为web的发展历史更为悠久，而且伴随着Web端的应用场景越发广阔，内容排版越发复杂；这让排版技术在web端扮演着更加举足轻重的角色。下面我就先从web开始讲起：

       1990年，Berners-Lee发明了HTML，最开始仅仅支持文本排版以及一些超链接；

</description>
        <pubDate>Mon, 31 Jul 2017 23:53:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/duo_duan_pai_ban_za_tan/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/duo_duan_pai_ban_za_tan/</guid>
        
        <category>iOS</category>
        
        <category>web</category>
        
        <category>Android</category>
        
        <category>流体排版</category>
        
        <category>FlexboxLayout</category>
        
        
        <category>未分类</category>
        
      </item>
    
      <item>
        <title>Swift学习笔记（初始化过程）</title>
        <description>
| 导语
Swift已经更新到4.0了，成为苹果推荐开发者进行iOS开发的语言，因此即使手头上的工程项目使用的还是object-c，但抽空学习下swift还是有必要的。因为swift从3.0开始已经日趋稳定，所以现在网上的资料大部分都是swift3.0的，本文的内容也是基于swift3.0，如果4.0有涉及新的更改，还需自己查阅。

     km以及网上介绍swift基本语法的文章已经有不少，我这里就不累赘。这篇文章主要想讲的是：swift的初始化。

</description>
        <pubDate>Mon, 31 Jul 2017 21:38:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/swift_xue_xi_bi_ji__chu_shi_hua_guo_cheng_/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/swift_xue_xi_bi_ji__chu_shi_hua_guo_cheng_/</guid>
        
        <category>Swift</category>
        
        
        <category>未分类</category>
        
      </item>
    
      <item>
        <title>iOS推送调试工具Easy APNs Provider的使用</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一背景&quot; id=&quot;markdown-toc-一背景&quot;&gt;一·背景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一背景&quot;&gt;一·背景&lt;/h3&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 31 Jul 2017 21:05:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/ios_tui_song_diao_shi_gong_ju_easy_apns_provider_de_shi_yong/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/ios_tui_song_diao_shi_gong_ju_easy_apns_provider_de_shi_yong/</guid>
        
        <category>iOS</category>
        
        <category>推送</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>IOS控件动画的一种通用方法</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ios控件动画的一种通用方法&quot; id=&quot;markdown-toc-ios控件动画的一种通用方法&quot;&gt;IOS控件动画的一种通用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ios控件动画的一种通用方法&quot;&gt;IOS控件动画的一种通用方法&lt;/h1&gt;

&lt;blockquote&gt;
  最近在做一个垂直弹幕控件 , 在做控件动画时费了不少心思, 这里分享一些心得.
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 31 Jul 2017 20:45:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/ios_kong_jian_dong_hua_de_yi_zhong_tong_yong_fang_fa/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/ios_kong_jian_dong_hua_de_yi_zhong_tong_yong_fang_fa/</guid>
        
        <category>iOS</category>
        
        <category>动画</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>封装内嵌UICollectionView和UIPageControl的ScrollView</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一交互样式&quot; id=&quot;markdown-toc-一交互样式&quot;&gt;一。交互样式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

在需求中涉及到一个比较通用的控件，ScrollView里面嵌入CollectionView，封装一下，后面再有相同交互不用重复造轮子。

&lt;h5 id=&quot;一交互样式&quot;&gt;一。交互样式&lt;/h5&gt;

</description>
        <pubDate>Mon, 31 Jul 2017 20:44:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/feng_zhuang_nei_qian_uicollectionview_he_uipagecontrol_de_scrollview/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/feng_zhuang_nei_qian_uicollectionview_he_uipagecontrol_de_scrollview/</guid>
        
        <category>UICollectionView</category>
        
        <category>UIScrollView</category>
        
        <category>UIPageControl</category>
        
        <category>iOS</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>[iOS] OpenGL ES 2.0之初体验</title>
        <description>
| 导语 OpenGL ES 是专门为手持设备制定的 3D 规范，是 OpenGL 的简化版，目前最新规范版本为 3.0。 由于iPhone
5C及以下设备不支持OpenGL ES 3.0，所以这里我以2.0版本为例进行OpenGL ES的入门探索。

        虽然 iOS 5在 GLKit 中提供了方便使用OpenGL ES的GLKView，但我这里还是先从零开始设置自己的GL ES
view，从而更进一步了解OpenGL ES是如何工作的。

</description>
        <pubDate>Mon, 31 Jul 2017 20:36:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/ios_opengl_es_2_0_zhi_chu_ti_yan/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/ios_opengl_es_2_0_zhi_chu_ti_yan/</guid>
        
        <category>iOS</category>
        
        <category>OpenGL</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>图解Objective-C对象模型</title>
        <description>
&lt;strong&gt;目录&lt;/strong&gt;：&lt;br /&gt;
&lt;strong&gt;1.这就是Objective-C对象模型吗？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;2.Objective-C对象结构&lt;/strong&gt;

</description>
        <pubDate>Mon, 31 Jul 2017 20:13:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/tu_jie_objective_c_dui_xiang_mo_xing/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/tu_jie_objective_c_dui_xiang_mo_xing/</guid>
        
        <category>iOS对象模型</category>
        
        <category>对象模型</category>
        
        <category>objectivec</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>VC减负若干技巧（一）</title>
        <description>
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;导语 VC代码的膨胀和臃肿，是业界普遍问题，网上很多文章也都在讨论如何给VC减负，这里总结一下我看过的文章提出的一些减负技巧&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

随着业务的变更和增加，VC的代码也随着庞大和臃肿，有些一开始设计不好的VC，更是随着时间推移，慢慢变成一场灾难。我的一个感受，某些模块的代码不是万不得已我是不敢点开看的。

为什么会出现这种问题呢？  貌似VC的膨胀和臃肿，确实也是业界普遍问题，网上很多文章也都在讨论如何给VC减负，这里总结一下我看过的文章提出的一些减负技巧。

</description>
        <pubDate>Mon, 31 Jul 2017 18:23:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/vc_jian_fu_ruo_gan_ji_qiao__yi_/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/vc_jian_fu_ruo_gan_ji_qiao__yi_/</guid>
        
        <category>VC</category>
        
        <category>腐烂</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>React Native学习笔记</title>
        <description>
&lt;strong&gt;原理&lt;/strong&gt;

一．React

</description>
        <pubDate>Mon, 31 Jul 2017 17:31:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/react_native_xue_xi_bi_ji/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/react_native_xue_xi_bi_ji/</guid>
        
        <category>iOS</category>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>深度学习之风格迁移简介</title>
        <description>
&lt;strong&gt;风格迁移（style transfer）&lt;/strong&gt;最近两年非常火，可谓是深度学习领域很有创意的研究成果。它主要是通过神经网络，将一幅艺术风格画（style image）和一张普通的照片（content image）巧妙地融合，形成一张非常有意思的图片。

&lt;img src=&quot;/image/shen_du_xue_xi_zhi_feng_ge_qian_yi_jian_jie/4a0dbd0ba7031a2b9e0f97d222d5050799764b92b7b135ffba3edfda4fd2feea&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Mon, 31 Jul 2017 17:03:00 +0800</pubDate>
        <link>http://MelonTeam.com/posts/shen_du_xue_xi_zhi_feng_ge_qian_yi_jian_jie/</link>
        <guid isPermaLink="true">http://MelonTeam.com/posts/shen_du_xue_xi_zhi_feng_ge_qian_yi_jian_jie/</guid>
        
        <category>深度学习</category>
        
        <category>风格化</category>
        
        <category>风格迁移</category>
        
        
        <category>ai</category>
        
      </item>
    
  </channel>
</rss>
